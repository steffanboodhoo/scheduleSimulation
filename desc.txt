Initialization - 

This is where the schedules are either created or loaded. A 3d array is returned [person][day][time]

Normalization - 

This is where the schedules are normalized

Create schedule - 

a set of n persons is randomly selected
and the best day/time is selected using find_bestT()

Feedback

When a change occurs in a person's schedule what happens:
	Get all events that the person belong to.
	For each event evaluate the best time Using find_bestT() [once it's needed]
	 

Events
{	
	'event_id':{
				'day':<day>,
				'slot':<slot>,
				'members':{
							<member_id> : <original_weight>,
							<member_id> : <original_weight>,
							...
							}
				}
}

Mapping
{
	<member_id>:[<event_id>, <event_id>, ...],
	<member_id>:[<event_id>, <event_id>, ...],
	...
}


while( queue not empty )
	c_event = dequeue()
	checkEvent(c_event)

given an event_id, a list of members affected 
	for each member get all the events they belong to
	for every event 
		find the best_time
		if the new best_time better != current best_time
			put event in queue 

[[ 4, 8, 7, 9, 5]
[ 7, 5, 8, 6, 9]
[ 6, 6, 3, 5, 7]
[ 9, 3, 5, 4, 5]]
